# makeCacheMatrix creates a list containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of inverse of the matrix
# 4. get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {#like it was done before
  inv <- NULL#call it
  set <- function(y) {
    x <<- y
    inv <<- NULL
  }
  get <- function() x
  setinverse <- function(inverse) inv <<- inverse#call it
  getinverse <- function() inv#apply it
  list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)#construct
  
}
# The following function returns the inverse of the matrix. It first checks if
# the inverse has already been computed. If so, it gets the result and skips the
# computation. If not, it computes the inverse, sets the value in the cache via
# setinverse function.

# !!!!!This function assumes that the matrix is always invertible.
cacheSolve <- function(x, ...) {
  inv <- x$getinverse()#get it
  if(!is.null(inv)) {#if OK
    message("getting cached data.")
    return(inv)#ok
  }
  data <- x$get()#else
  inv <- solve(data)
  x$setinverse(inv)#inverse
  inv
}
#check it
a <- matrix(rexp(100, rate=.1), ncol=10)#random mat 10*10
a
Cached_a <- makeCacheMatrix(a)#apply
cacheSolve(Cached_a)#works!
